{
	"data": [

		{
			"libName": "sklearn.cluster",
			"methods": [{
				"methodName": "__init__(n_clusters=8, init=k-means++, n_init=10, max_iter=300, tol=0.0001, precompute_distances=auto, verbose=0, random_state=None, copy_x=True, n_jobs=1, algorithm=auto)",
				"methodDesc": ""
			}, {
				"methodParams": ["X", "y"],
				"methodName": "fit(X, y=None)",
				"methodParamsBody": "X : array-like or sparse matrix, shape=(n_samples, n_features)   Training instances to cluster.   y : Ignored ",
				"methodDesc": "Compute k-means clustering."
			}, {
				"methodName": "fit_predict(X, y=None)",
				"methodReturnsBody": "labels : array, shape [n_samples,]   Index of the cluster each sample belongs to.  ",
				"methodParams": ["X", "u"],
				"methodReturns": ["labels"],
				"methodDesc": "Compute cluster centers and predict cluster index for each sample. Convenience method; equivalent to calling fit(X) followed by predict(X).",
				"methodParamsBody": "X : {array-like, sparse matrix}, shape = [n_samples, n_features]   New data to transform.   u : Ignored "
			}, {
				"methodName": "fit_transform(X, y=None)",
				"methodReturnsBody": "X_new : array, shape [n_samples, k]   X transformed in the new space.  ",
				"methodParams": ["X", "y"],
				"methodReturns": ["X_new"],
				"methodDesc": "Compute clustering and transform X to cluster-distance space. Equivalent to fit(X).transform(X), but more efficiently implemented.",
				"methodParamsBody": "X : {array-like, sparse matrix}, shape = [n_samples, n_features]   New data to transform.   y : Ignored "
			}, {
				"methodName": "get_params(deep=True)",
				"methodReturnsBody": "params : mapping of string to any   Parameter names mapped to their values.  ",
				"methodParams": ["deep"],
				"methodReturns": ["params"],
				"methodDesc": "Get parameters for this estimator.",
				"methodParamsBody": "deep : boolean, optional   If True, will return the parameters for this estimator and contained subobjects that are estimators.  "
			}, {
				"methodName": "predict(X)",
				"methodReturnsBody": "labels : array, shape [n_samples,]   Index of the cluster each sample belongs to.  ",
				"methodParams": ["X"],
				"methodReturns": ["labels"],
				"methodDesc": "Predict the closest cluster each sample in X belongs to. In the vector quantization literature, cluster_centers_ is called the code book and each value returned by predict is the index of the closest code in the code book.",
				"methodParamsBody": "X : {array-like, sparse matrix}, shape = [n_samples, n_features]   New data to predict.  "
			}, {
				"methodName": "score(X, y=None)",
				"methodReturnsBody": "score : float   Opposite of the value of X on the K-means objective.  ",
				"methodParams": ["X", "y"],
				"methodReturns": ["score"],
				"methodDesc": "Opposite of the value of X on the K-means objective.",
				"methodParamsBody": "X : {array-like, sparse matrix}, shape = [n_samples, n_features]   New data.   y : Ignored "
			}, {
				"methodName": "set_params(**params)",
				"methodReturns": [],
				"methodDesc": "Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as pipelines). The latter have parameters of the form <component>__<parameter> so that its possible to update each component of a nested object.",
				"methodReturnsBody": "self :"
			}, {
				"methodName": "transform(X)",
				"methodReturnsBody": "X_new : array, shape [n_samples, k]   X transformed in the new space.  ",
				"methodParams": ["X"],
				"methodReturns": ["X_new"],
				"methodDesc": "Transform X to a cluster-distance space. In the new space, each dimension is the distance to the cluster centers.  Note that even if X is sparse, the array returned by transform will typically be dense.",
				"methodParamsBody": "X : {array-like, sparse matrix}, shape = [n_samples, n_features]   New data to transform.  "
			}],
			"allFuncParams": ["n_clusters", "init", "n_init", "max_iter", "tol", "precompute_distances", "verbose", "random_state", "copy_x", "n_jobs", "algorithm"],
			"notes": "The k-means problem is solved using Lloyds algorithm. The average complexity is given by O(k n T), were n is the number of samples and T is the number of iteration. The worst case complexity is given by O(n^(k+2/p)) with n = n_samples, p = n_features. (D. Arthur and S. Vassilvitskii, How slow is the k-means method? SoCG2006) In practice, the k-means algorithm is very fast (one of the fastest clustering algorithms available), but it falls in local minima. Thats why it can be useful to restart it several times. The k-means problem is solved using Lloyds algorithm. The average complexity is given by O(k n T), were n is the number of samples and T is the number of iteration. The worst case complexity is given by O(n^(k+2/p)) with n = n_samples, p = n_features. (D. Arthur and S. Vassilvitskii, How slow is the k-means method? SoCG2006) In practice, the k-means algorithm is very fast (one of the fastest clustering algorithms available), but it falls in local minima. Thats why it can be useful to restart it several times.",
			"funcName": "KMeans",
			"allFuncAttributes": ["cluster_centers_", "labels_ :", "inertia_"],
			"funcDesc": "K-Means clustering",
			"funcParamBody": "n_clusters : int, optional, default: 8 The number of clusters to form as well as the number of centroids to generate. init : {k-means++, random or an ndarray} Method for initialization, defaults to k-means++: k-means++ : selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes in k_init for more details. random: choose k observations (rows) at random from data for the initial centroids. If an ndarray is passed, it should be of shape (n_clusters, n_features) and gives the initial centers. n_init : int, default: 10 Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia. max_iter : int, default: 300 Maximum number of iterations of the k-means algorithm for a single run. tol : float, default: 1e-4 Relative tolerance with regards to inertia to declare convergence precompute_distances : {auto, True, False} Precompute distances (faster but takes more memory). auto : do not precompute distances if n_samples * n_clusters > 12 million. This corresponds to about 100MB overhead per job using double precision. True : always precompute distances False : never precompute distances verbose : int, default 0 Verbosity mode. random_state : int, RandomState instance or None, optional, default: None If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random . copy_x : boolean, default True When pre-computing distances it is more numerically accurate to center the data first.  If copy_x is True, then the original data is not modified.  If False, the original data is modified, and put back before the function returns, but small numerical differences may be introduced by subtracting and then adding the data mean. n_jobs : int The number of jobs to use for the computation. This works by computing each of the n_init runs in parallel. If -1 all CPUs are used. If 1 is given, no parallel computing code is used at all, which is useful for debugging. For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for n_jobs = -2, all CPUs but one are used. algorithm : auto, full or elkan, default=auto K-means algorithm to use. The classical EM-style algorithm is full. The elkan variation is more efficient by using the triangle inequality, but currently doesnt support sparse data. auto chooses elkan for dense data and full for sparse data.",
			"funcParamBodyArr": [{
					"paramName": "n_clusters",
					"type": "int, optional",
					"desc": "default: 8 The number of clusters to form as well as the number of centroids to generate."
				},
				{
					"paramName": "init",
					"type": "{k-means++, random or an ndarray}",
					"desc": "Method for initialization, defaults to k-means++: k-means++ : selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes in k_init for more details. random: choose k observations (rows) at random from data for the initial centroids. If an ndarray is passed, it should be of shape (n_clusters, n_features) and gives the initial centers."
				},
				{
					"paramName": "n_init",
					"type": "int",
					"desc": "default: 10 Number of time the k-means algorithm will be run with different centroid seeds. The final results will be the best output of n_init consecutive runs in terms of inertia."
				},
				{
					"paramName": "max_iter",
					"type": "int",
					"desc": "default: 300 Maximum number of iterations of the k-means algorithm for a single run."
				},
				{
					"paramName": "tol",
					"type": "float",
					"desc": "default: 1e-4 Relative tolerance with regards to inertia to declare convergence"
				},
				{
					"paramName": "precompute_distances",
					"type": "{auto, True, False}",
					"desc": "Precompute distances (faster but takes more memory). auto : do not precompute distances if n_samples * n_clusters > 12 million. This corresponds to about 100MB overhead per job using double precision. True : always precompute distances False : never precompute distances"
				},
				{
					"paramName": "verbose",
					"type": "int",
					"desc": "default 0 Verbosity mode."
				},
				{
					"paramName": "random_state",
					"type": "int, RandomState instance or None, optional",
					"desc": "default: None If int, random_state is the seed used by the random number generator; If RandomState instance, random_state is the random number generator; If None, the random number generator is the RandomState instance used by np.random . "
				},
				{
					"paramName": "copy_x",
					"type": "boolean",
					"desc": "default True When pre-computing distances it is more numerically accurate to center the data first.  If copy_x is True, then the original data is not modified.  If False, the original data is modified, and put back before the function returns, but small numerical differences may be introduced by subtracting and then adding the data mean."
				},
				{
					"paramName": "n_jobs",
					"type": "int",
					"desc": "The number of jobs to use for the computation. This works by computing each of the n_init runs in parallel. If -1 all CPUs are used. If 1 is given, no parallel computing code is used at all, which is useful for debugging. For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for n_jobs = -2, all CPUs but one are used. algorithm : auto, full or elkan, default=auto K-means algorithm to use. The classical EM-style algorithm is full. The elkan variation is more efficient by using the triangle inequality, but currently doesnt support sparse data. auto chooses elkan for dense data and full for sparse data."
				}
			],
			"funcAttrBody": "cluster_centers_ : array, [n_clusters, n_features] Coordinates of cluster centers labels_ : : Labels of each point inertia_ : float Sum of squared distances of samples to their closest cluster center."
		},

		{
			"libName": "sklearn.cluster",
			"methods": [{
				"methodName": "__init__(damping=0.5, max_iter=200, convergence_iter=15, copy=True, preference=None, affinity=euclidean, verbose=False)",
				"methodDesc": ""
			}, {
				"methodParams": ["X", "y"],
				"methodName": "fit(X, y=None)",
				"methodParamsBody": "X : array-like, shape (n_samples, n_features) or (n_samples, n_samples)   Data matrix or, if affinity is precomputed , matrix of similarities / affinities.   y : Ignored ",
				"methodDesc": "Create affinity matrix from negative euclidean distances, then apply affinity propagation clustering."
			}, {
				"methodName": "fit_predict(X, y=None)",
				"methodReturnsBody": "y : ndarray, shape (n_samples,)   cluster labels  ",
				"methodParams": ["X"],
				"methodReturns": ["y"],
				"methodDesc": "Performs clustering on X and returns cluster labels.",
				"methodParamsBody": "X : ndarray, shape (n_samples, n_features)   Input data.  "
			}, {
				"methodName": "get_params(deep=True)",
				"methodReturnsBody": "params : mapping of string to any   Parameter names mapped to their values.  ",
				"methodParams": ["deep"],
				"methodReturns": ["params"],
				"methodDesc": "Get parameters for this estimator.",
				"methodParamsBody": "deep : boolean, optional   If True, will return the parameters for this estimator and contained subobjects that are estimators.  "
			}, {
				"methodName": "predict(X)",
				"methodReturnsBody": "labels : array, shape (n_samples,)   Index of the cluster each sample belongs to.  ",
				"methodParams": ["X"],
				"methodReturns": ["labels"],
				"methodDesc": "Predict the closest cluster each sample in X belongs to.",
				"methodParamsBody": "X : {array-like, sparse matrix}, shape (n_samples, n_features)   New data to predict.  "
			}, {
				"methodName": "set_params(**params)",
				"methodReturns": [],
				"methodDesc": "Set the parameters of this estimator. The method works on simple estimators as well as on nested objects (such as pipelines). The latter have parameters of the form <component>__<parameter> so that its possible to update each component of a nested object.",
				"methodReturnsBody": "self :"
			}],
			"allFuncParams": ["damping", "max_iter", "convergence_iter", "copy", "preference", "affinity", "verbose"],
			"notes": "For an example, see examples/cluster/plot_affinity_propagation.py . The algorithmic complexity of affinity propagation is quadratic in the number of points. Brendan J. Frey and Delbert Dueck, Clustering by Passing Messages Between Data Points, Science Feb. 2007 For an example, see examples/cluster/plot_affinity_propagation.py . The algorithmic complexity of affinity propagation is quadratic in the number of points. Brendan J. Frey and Delbert Dueck, Clustering by Passing Messages Between Data Points, Science Feb. 2007",
			"funcName": "AffinityPropagation",
			"allFuncAttributes": ["cluster_centers_indices_", "cluster_centers_", "labels_", "affinity_matrix_", "n_iter_"],
			"funcDesc": "Perform Affinity Propagation Clustering of data.",
			"funcParamBody": "damping : float, optional, default: 0.5 Damping factor (between 0.5 and 1) is the extent to which the current value is maintained relative to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when updating these values (messages). max_iter : int, optional, default: 200 Maximum number of iterations. convergence_iter : int, optional, default: 15 Number of iterations with no change in the number of estimated clusters that stops the convergence. copy : boolean, optional, default: True Make a copy of input data. preference : array-like, shape (n_samples,) or float, optional Preferences for each point - points with larger values of preferences are more likely to be chosen as exemplars. The number of exemplars, ie of clusters, is influenced by the input preferences value. If the preferences are not passed as arguments, they will be set to the median of the input similarities. affinity : string, optional, default=``euclidean`` Which affinity to use. At the moment precomputed and euclidean are supported. euclidean uses the negative squared euclidean distance between points. verbose : boolean, optional, default: False Whether to be verbose.",
			"funcParamBodyArr": [{
					"paramName": "damping",
					"type": "float, optional",
					"desc": "default: 0.5 Damping factor (between 0.5 and 1) is the extent to which the current value is maintained relative to incoming values (weighted 1 - damping). This in order to avoid numerical oscillations when updating these values (messages)."
				},
				{
					"paramName": "max_iter",
					"type": "int, optional",
					"desc": "default: 200 Maximum number of iterations."
				},
				{
					"paramName": "convergence_iter",
					"type": "int, optional",
					"desc": "default: 15 Number of iterations with no change in the number of estimated clusters that stops the convergence."
				},
				{
					"paramName": "copy",
					"type": "boolean, optional",
					"desc": "default: True Make a copy of input data."
				},
				{
					"paramName": "preference",
					"type": "array-like, shape (n_samples) or float, optional",
					"desc": "Preferences for each point - points with larger values of preferences are more likely to be chosen as exemplars. The number of exemplars, ie of clusters, is influenced by the input preferences value. If the preferences are not passed as arguments, they will be set to the median of the input similarities."
				},
				{
					"paramName": "affinity",
					"type": "string, optional",
					"desc": "default=``euclidean`` Which affinity to use. At the moment precomputed and euclidean are supported. euclidean uses the negative squared euclidean distance between points. "
				},
				{
					"paramName": "verbose",
					"type": "boolean, optional",
					"desc": "default: False Whether to be verbose."
				}
			],
			"funcAttrBody": "cluster_centers_indices_ : array, shape (n_clusters,) Indices of cluster centers cluster_centers_ : array, shape (n_clusters, n_features) Cluster centers (if affinity != precomputed ). labels_ : array, shape (n_samples,) Labels of each point affinity_matrix_ : array, shape (n_samples, n_samples) Stores the affinity matrix used in fit . n_iter_ : int Number of iterations taken to converge."
		}
	]
}